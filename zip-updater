#!/bin/bash
# Zip-Updater
# Allows you to easilly download, extract, and update zip content
# Author: UltimateByte
# Website: http://www.lrob.fr
version="080115"

#####################
###   Variables   ###
### Configuration ###
#####################

# Target directory in which you want your exctracted zip folders
# Please use /home/username/path/to/directory
targetdir="targetdir"

# Do you want to keep every instance of zipfiles you download for reverting to a previous version ?
backupzips="on"

# To come - Convert folders to lowercase (default on to correct windows devs' ignorance)
lowercase="on"

# Paste links of zip files you want to download line by line
# Example :
# ziplinks="https://github.com/wiremod/advdupe2/archive/master.zip
# https://github.com/wiremod/advduplicator/archive/master.zip
# https://github.com/nrlulz/ACF/archive/master.zip"

ziplinks="https://github.com/wiremod/advdupe2/archive/master.zip
https://github.com/wiremod/advduplicator/archive/master.zip"


#####################
###    Program    ###
### Do Not Change ###
#####################

rootdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
zipsdir="${rootdir}/tempzipfiles"
extractdir="${zipsdir}/exctracted-zipfiles"
backupdir="${rootdir}/backup-zipfiles"

# Check if targetdir is set
if [ -z "${targetdir}" ]; then
	echo "Please, set a target directory using targetdir variable first"
# Check if zip links are provided
	if [ -z "${ziplinks}" ]; then	
		echo "Please, set something do download !"
# Check if backupzips is set
		if [ ! "${backupzips}" == "on" || ! "${backupzips}" == "off"]; then
			echo "Please, set backupzips to on or off"
			exit
		fi
	fi
fi


fn_create_dirs(){
echo "Creating required folders..."
sleep 1
# Check if dirs exist, create if if not
if [ ! -d "${targetdir}" ]; then
	mkdir -v "${targetdir}"
fi

if [ ! -d "${zipsdir}" ]; then
	mkdir -v "${zipsdir}"
fi

if [ ! -d "${extractdir}" ]; then
	mkdir -v "${extractdir}"
fi

if [ ! -d "${backupdir}" ]; then
	mkdir -v "${backupdir}"
fi
}

fn_dl_zip(){
while IFS= read -r line
do 
	echo "Downloading ${line}"
	wget --content-disposition -q "${line}" -P "${zipsdir}"
done <<< "${ziplinks}"
}

fn_extract_zip(){
# Recursively extract zip files 
echo ""
echo "Extracting zipfiles..."
echo ""
sleep 1
cd "${rootdir}"
find "${zipsdir}" -name "*.zip" | while read filename; do unzip -o "$filename" -d "${extractdir}"; done;
}

fn_lowercase(){
# Converting foldernames to lowercase
if [ "${lowercase}" == "on" ]; then
	echo "Converting uppercase zips to lowercase"
	sleep 2
	for x in `find ${extractdir}/* -maxdepth 0 -type d`;
		do
		# Translate CAPS to small letters
		y=$(echo $x | tr ‘[A-Z]’ ‘[a-z]’);
		# Check if directory exits
		if [ ! -d $y ]; then
			echo “mv $x $y”
			mv $x $y;
		fi
	done
fi
}

fn_move(){
# Moving extractions to targetdir
echo "Moving Extracted zips to desired directory..."
sleep 2
mv -v "${extractdir}"/* "${targetdir}"/
echo ""
echo "Files moved to desired directory"
}

fn_getdate(){
# Get current date into a variable
thedate=$(date +"%y-%m-%d-%Hh%Mm%Ss")
}

fn_remove_zips(){
# Remove zips when no backup are set
	rm -vR "${zipsdir}"
}

fn_backup(){
# No backup, remove zip files
if [ "${backupzips}" == "off" ]; then
	echo ""
	echo "No zip backup, removing zips"
	echo ""
	sleep 1
	fn_remove_zips
elif [ "${backupzips}" == "on" ]; then
# Backup, move files to a current date folder in backupdir
	echo "Backuping zips to ${backupdir}"
	sleep 1
	fn_getdate
	mkdir "${backupdir}"/$"{thedate}"
	mv -v "${zipsdir}"/* "${thedate}"
fi
}

fn_prompt_continue(){
while true; do
	read -p "Continue? [y/N]" yn
	case $yn in
	[Yy]* ) break;;
	[Nn]* ) echo Exiting; exit;;
	* ) echo "Please answer yes or no.";;
esac
done
}

fn_complete(){
echo ""
echo "Operations complete"
echo "Hope you enjoy this script ;)"
echo "Cheers !"
echo ""
}

# Running functions
echo "Thanks for using this script made by UltimateByte"
echo "This will start downloading your zipfiles, then overwrite older versions"
echo "in the target directory you set."
echo "Start updating zips ?"
echo ""
fn_prompt_continue
fn_create_dirs
fn_dl_zip
fn_extract_zip
# fn_lowercase
fn_move
fn_backup
fn_complete