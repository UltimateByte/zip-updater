#!/bin/bash
# Zip-Updater
# Allows you to easilly download, extract, and update zip content
# Author: UltimateByte
# Website: http://www.lrob.fr
version="080115"

#####################
###   Variables   ###
### Configuration ###
#####################

# Target directory in which you want your exctracted zip folders
# Please use /home/username/path/to/directory
targetdir="targetdir"

# Do you want to keep every instance of zipfiles you download for reverting to a previous version ?
backupzips="on"

# Prompt for continue ? (Turn off for cronjob use)
promptmode="on"

# To come - Convert folders to lowercase (default on to correct windows devs' ignorance)
lowercase="on"

# Paste links of zip files you want to download line by line
# Example :
# ziplinks="https://github.com/wiremod/advdupe2/archive/master.zip
# https://github.com/wiremod/advduplicator/archive/master.zip
# https://github.com/nrlulz/ACF/archive/master.zip"

ziplinks=""


#####################
###    Program    ###
### Do Not Change ###
#####################

rootdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
zipsdir="${rootdir}/tempzipfiles"
extractdir="${rootdir}/exctracted-zipfiles"
backupdir="${rootdir}/backup-zipfiles"

fn_error_check(){
# Check if targetdir is set
if [ -z "${targetdir}" ]; then
	echo "Please, set a target directory using targetdir variable first"
	local errortargetdir="1"
fi
# Check if zip links are provided
if [ -z "${ziplinks}" ]; then	
	echo ""
	echo "Please, set something do download !"
	local errorziplinks="1"
fi
# Check if backupzips is set correctly
if [ "${backupzips}" != "on" ] && [ "${backupzips}" != "off" ]; then
	echo ""
	echo "Please, set backupzips to on or off"
	local errorbackupzips="1"
fi
# Check if promptmode is set correctly 
if [ "${promptmode}" != "on" ] && [ "${promptmode}" != "off" ]; then
	echo ""
	echo "Please, set promptmode to on or off"
	local errorpromptmode="1"
fi
if  [ "$errortargetdir" == "1" ] || [ "$errorziplinks" == "1" ] || [ "$errorbackupzips" == "1" ] || [ "$errorpromptmode" == "1" ]; then
	echo ""
	echo "Exiting";	exit
fi
}

fn_create_dirs(){
echo "Creating required folders..."
sleep 1
# Check if dirs exist, create if if not
if [ ! -d "${targetdir}" ]; then
	mkdir -v "${targetdir}"
fi

if [ ! -d "${zipsdir}" ]; then
	mkdir -v "${zipsdir}"
fi

if [ ! -d "${extractdir}" ]; then
	mkdir -v "${extractdir}"
fi

if [ ! -d "${backupdir}" ]; then
	mkdir -v "${backupdir}"
fi
}

fn_dl_zip(){
while IFS= read -r line
do 
	echo "Downloading ${line}"
	wget --content-disposition -q "${line}" -P "${zipsdir}"
done <<< "${ziplinks}"
}

fn_extract_zip(){
# Recursively extract zip files 
echo ""
echo "Extracting zipfiles..."
echo ""
sleep 1
find "${zipsdir}" -name "*.zip" | while read filename; do unzip -o "$filename" -d "${extractdir}"; done;
}

fn_lowercase(){
# Converting foldernames to lowercase
if [ "${lowercase}" == "on" ]; then
	echo "Converting uppercase folders to lowercase"
	sleep 2
find "${extractdir}" -exec readlink -e '{}' \; | rename  'y/A-Z/a-z/'
fi
}

fn_move(){
# Moving extractions to targetdir
echo "Moving Extracted zips to desired directory..."
sleep 2
mv -vf "${extractdir}"/* "${targetdir}"/
echo ""
echo "Files moved to desired directory"
}

fn_rm_extractdir(){
echo "Removing temp folder"
sleep 1
rm -vR "${extractdir}"
}

fn_getdate(){
# Get current date into a variable
thedate=$(date +"%y-%m-%d-%Hh%Mm%Ss")
}

fn_backup(){
# No backup, remove zip files
if [ "${backupzips}" == "off" ]; then
	echo ""
	echo "No zip backup"
	echo ""
	sleep 1
elif [ "${backupzips}" == "on" ]; then
# Backup, move files to a current date folder in backupdir
	fn_getdate
	echo ""
	echo "Backuping zips to ${backupdir}/${thedate}"
	echo ""
	sleep 1
	mkdir -v "${backupdir}"/"${thedate}"
	mv -v "${zipsdir}"/* "${backupdir}"/"${thedate}"
fi
}

fn_rm_zipsdir(){
echo "Clearing temp zip folder"
rm -vR "${zipsdir}"
}

fn_prompt_continue(){
if [ "${promptmode}" == "on" ]; then
	while true; do
		read -p "Continue ? [y/N]" yn
		case $yn in
		[Yy]* ) break;;
		[Nn]* ) echo Exiting; exit;;
		* ) echo "Please answer yes or no.";;
	esac
	done
fi
}

fn_complete(){
echo ""
echo "Operations complete"
echo "Hope you enjoy this script ;)"
echo "Cheers !"
echo ""
}

# Running functions
echo ""
echo "Thanks for using this script made by UltimateByte"
fn_error_check
echo ""
echo "Start downloading or updating zips ?"
fn_prompt_continue
fn_create_dirs
fn_dl_zip
fn_extract_zip
fn_lowercase
fn_move
fn_rm_extractdir
fn_backup
fn_rm_zipsdir
fn_complete
